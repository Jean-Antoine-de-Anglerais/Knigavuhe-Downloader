import sys
import requests
from bs4 import BeautifulSoup
from PyQt6.QtWidgets import (
    QWidget, QLabel, QLineEdit, QPushButton, QTextEdit, QVBoxLayout, QHBoxLayout, QFileDialog, QProgressBar, QApplication
)
from PyQt6.QtGui import QIcon
from PyQt6.QtCore import pyqtSignal, QThread
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import json
import re
import os
from pathlib import Path

def get_default_download_path():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ /Music/Audiobooks/
    return Path.home() / "Music" / "Audiobooks"

def get_page(url: str):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–æ–π
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    cookies = {
        "new_design": "1" # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∂–∞–ª—Å—è –∏–º–µ–Ω–Ω–æ –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞
    }

    book_page = requests.get(url, headers=headers, cookies=cookies)
    soup = BeautifulSoup(book_page.content, 'lxml')

    return soup

def get_json_data(soup: BeautifulSoup):
    # –ò—â–µ–º –≤—Å–µ —Ç–µ–≥–∏ <script>
    scripts = soup.find_all('script')

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ <script> –∏ –∏—â–µ–º —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç 'BookController.enter'
    target_script = None
    for script in scripts:
        if script.string and "BookController.enter" in script.string:
            target_script = script
            break

    match = re.search(r'BookController\.enter\((\{.*?\})\);', target_script.string)
    if match:
        json_data = json.loads(match.group(1))  # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ Python-–æ–±—ä–µ–∫—Ç
        # print(json.dumps(json_data, indent=4, ensure_ascii=False))  # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥

    return json_data

def get_name_and_authors_and_readers(json_data: dict):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤ –∏ –∏–º–µ–Ω–∞ —á—Ç–µ—Ü–æ–≤
    name = json_data["book"]["name"]
    authors = []
    readers = []

    for author_id in json_data["book"]["author_ids"]:
        authors.append(json_data["book"]["authors"][str(author_id)]["name"])

    for reader_id in json_data["book"]["reader_ids"]:
        readers.append(json_data["book"]["readers"][str(reader_id)]["name"])

    if len(authors) == 0:
        authors.append("–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

    if len(readers) == 0:
        readers.append("–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        
    return name, authors, readers

def get_titles_and_links(json_data: dict):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–ª–∞–≤ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö
    titles = []
    links = []

    for chapter in json_data["playlist"]:
        titles.append(chapter["title"])
        links.append(chapter["url"])

    return dict(zip(titles, links))

def download(data: dict, path: str, name: str, progress_callback):
    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥—É
    if not os.path.exists(path):
        os.makedirs(path)

    total_size = 0
    downloaded_size = 0

    session = requests.Session()
    retries = Retry(total=5, backoff_factor=1, status_forcelist=[500, 502, 503, 504])
    session.mount("https://", HTTPAdapter(max_retries=retries))

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    for link in data.values():
        try:
            response = requests.head(link)
            if "Content-Length" in response.headers:
                total_size += int(response.headers["Content-Length"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {e}")

    if total_size == 0:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.")
        total_size = len(data)  # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—á–∏—Ç–∞–µ–º –∏—Ö —Ä–∞–≤–Ω—ã–º–∏

    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    for title, link in data.items():
        try:
            response = session.get(link, stream=True, allow_redirects=True)
            file_size = int(response.headers.get("Content-Length", 1))

            with open(os.path.join(path, title + ".mp3"), "wb") as f:
                for chunk in response.iter_content(chunk_size=32768):
                    if chunk:
                        f.write(chunk)
                        downloaded_size += len(chunk)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–∞–≤–Ω–æ
                        progress_callback.emit(int(downloaded_size / total_size * 100))

        except Exception as e:
        #     if os.path.exists(os.path.join(path, title + ".mp3")):
        #         os.remove(os.path.join(path, title + ".mp3"))
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {title}: {e}")

        if os.path.exists(os.path.join(path, title + ".mp3")):
            actual_size = os.path.getsize(os.path.join(path, title + ".mp3"))
            if actual_size != file_size:
                print(f"–§–∞–π–ª {title} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –£–¥–∞–ª–µ–Ω–∏–µ...")
                os.remove(os.path.join(path, title + ".mp3"))


class DownloadThread(QThread):
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal()  # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

    def __init__(self, data, path, name):
        super().__init__()
        self.data = data
        self.path = path
        self.name = name

    def run(self):
        download(self.data, self.path, self.name, self.progress_signal)
        self.finished_signal.emit()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                
class MainWindow(QWidget):
    progress_signal = pyqtSignal(int)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    def __init__(self):
        
        super().__init__()
        self.url = ""
        self.folder = str(get_default_download_path())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –ø—É—Ç—å
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Knigavuhe Downloader")
        self.resize(500, 450)
        self.setWindowIcon(QIcon(ICON_PATH))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        # –°—Ç–∏–ª—å –¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
        self.setStyleSheet("""
            QWidget {
                background-color: #2e2e2e;
                font-family: "Segoe UI", sans-serif;
                font-size: 13px;
                color: #f0f0f0;
            }
            QLabel {
                color: #f0f0f0;
                margin-bottom: 4px;
            }
            QLineEdit, QTextEdit {
                background-color: #3c3c3c;
                border: 1px solid #555555;
                border-radius: 4px;
                padding: 6px;
                color: #f0f0f0;
            }
            QLineEdit:focus, QTextEdit:focus {
                border: 1px solid #66afe9;
            }
            QPushButton {
                background-color: #007BFF;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 8px 12px;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
            QProgressBar {
                border: 1px solid #555555;
                background: #3c3c3c;
                border-radius: 4px;
                text-align: center;
                color: #f0f0f0;
            }
            QProgressBar::chunk {
                background: #007BFF;
            }
        """)

        layout = QVBoxLayout()
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(12)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
        url_label = QLabel("URL:")
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥—É...")
        layout.addWidget(url_label)
        layout.addWidget(self.url_input)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è + –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
        folder_label = QLabel("–ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞–º–∏:")
        folder_layout = QHBoxLayout()
        self.folder_input = QLineEdit()
        self.folder_input.setPlaceholderText(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.folder}")
        self.folder_button = QPushButton("üìÇ")
        self.folder_button.setFixedWidth(40)
        self.folder_button.clicked.connect(self.select_folder)
        folder_layout.addWidget(self.folder_input)
        folder_layout.addWidget(self.folder_button)
        layout.addWidget(folder_label)
        layout.addLayout(folder_layout)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        self.button = QPushButton("‚è¨ –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
        self.button.setFixedWidth(180)
        self.button.clicked.connect(self.start_downloading)
        button_layout.addWidget(self.button)
        layout.addLayout(button_layout)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        self.progress_signal.connect(self.progress_bar.setValue)
        layout.addWidget(self.progress_bar)

        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏
        console_label = QLabel("–ö–æ–Ω—Å–æ–ª—å:")
        self.console_output = QTextEdit()
        self.console_output.setReadOnly(True)
        layout.addWidget(console_label)
        layout.addWidget(self.console_output)

        self.setLayout(layout)

    def select_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if folder:
            self.folder_input.setText(folder)

    def start_downloading(self):
        self.url = self.url_input.text()
        if self.folder_input.text():
            self.folder = self.folder_input.text()
        
        self.progress_bar.setValue(0)  # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞

        if not self.url:
            self.console_output.append("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL.")
            return

        if not self.url.startswith("https://m."):
            self.url = self.url.replace("https://", "https://m.", 1)

        if not self.url.startswith("https://m.knigavuhe.org/book/"):
            self.console_output.append("–ù–µ–≤–µ—Ä–Ω—ã–π URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ URL.")
            return

        self.console_output.append("–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏...")

        page = get_page(self.url)
        json_data = get_json_data(page)
        name, authors, readers = get_name_and_authors_and_readers(json_data)
        self.console_output.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ - {name}, {'–∞–≤—Ç–æ—Ä' if len(authors) == 1 else '–∞–≤—Ç–æ—Ä—ã'} - {', '.join(authors)}, {'—á—Ç–µ—Ü—ã' if len(readers) > 1 or readers[0] == '–∞—Ä—Ç–∏—Å—Ç—ã —Ç–µ–∞—Ç—Ä–æ–≤' else '—á—Ç–µ—Ü'} - {', '.join(readers)}")
        titles_and_links = get_titles_and_links(json_data)

        self.folder = os.path.join(self.folder, ", ".join(authors), name, ', '.join(readers))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = DownloadThread(titles_and_links, self.folder, name)
        self.thread.progress_signal.connect(self.progress_bar.setValue)
        self.thread.finished_signal.connect(self.on_download_finished)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        self.thread.start()

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.folder = str(get_default_download_path())
        self.url = ""
        self.is_merged = False

    def on_download_finished(self):
        self.console_output.append("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        
if getattr(sys, 'frozen', False):  # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ .exe
    BASE_DIR = sys._MEIPASS
else:
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

ICON_PATH = os.path.join(BASE_DIR, "icon.png")

app = QApplication(sys.argv)
window = MainWindow()
window.show()
sys.exit(app.exec())
